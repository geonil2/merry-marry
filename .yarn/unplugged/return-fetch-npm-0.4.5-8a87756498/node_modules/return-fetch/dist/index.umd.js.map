{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * A simple and powerful high order function to extend fetch.\n *\n * @packageDocumentation\n */\n\n/**\n * Arguments of fetch function.\n *\n * @throws {Error} if a first argument of fetch is `Request` object. only string and URL are supported.\n * @see {fetch, RequestInfo, Request}\n *\n * @public\n */\nexport type FetchArgs = [string | URL, RequestInit | undefined];\n\n/**\n * Type of `returnFetch` function.\n * It is useful for whom want to write customized returnFetch function.\n *\n * @public\n */\nexport type ReturnFetch = typeof returnFetch;\n\n/**\n * Options of `returnFetch` function.\n *\n * @public\n */\nexport type ReturnFetchDefaultOptions = {\n  /**\n   * `fetch` function to be used in `returnFetch` function.\n   * If not provided, `fetch` function in global scope will be used.\n   * Any fetch implementation can be used, such as `node-fetch`, `cross-fetch`, `isomorphic-fetch`, etc.\n   *\n   * a `fetch` function created by `returnFetch` also can be used here.\n   *\n   * @public\n   */\n  fetch?: ReturnType<ReturnFetch>;\n  /**\n   * Base URL of fetch. It will be used when the first argument of fetch is relative URL.\n   *\n   * @public\n   */\n  baseUrl?: string | URL;\n  /**\n   * Default headers of fetch. It will be used when the second argument of fetch does not have `headers` property.\n   * If it is provided and `headers` also provided when calling a `fetch`, headers will be merged.\n   * Priority of headers is `requestInit.headers` > `defaultOptions.headers`. Duplicated headers will be overwritten.\n   *\n   * @public\n   */\n  headers?: HeadersInit;\n  interceptors?: {\n    /**\n     * Request interceptor. It will be called before request.\n     *\n     * @param requestArgs Arguments of fetch function.\n     * @param fetch the `fetch` you provided at {@link ReturnFetchDefaultOptions['fetch']}\n     *\n     * @public\n     */\n    request?: (\n      requestArgs: FetchArgs,\n      fetch: NonNullable<ReturnFetchDefaultOptions[\"fetch\"]>,\n    ) => Promise<FetchArgs>;\n    /**\n     * Response interceptor. It will be called after response.\n     *\n     * @param response Response object received from fetch function.\n     * @param requestArgs Arguments of fetch function.\n     * @param fetch the `fetch` you provided at {@link ReturnFetchDefaultOptions['fetch']}\n     *\n     * @public\n     */\n    response?: (\n      response: Response,\n      requestArgs: FetchArgs,\n      fetch: NonNullable<ReturnFetchDefaultOptions[\"fetch\"]>,\n    ) => Promise<Response>;\n  };\n};\n\nconst applyDefaultOptions = (\n  [input, requestInit]: FetchArgs,\n  defaultOptions?: ReturnFetchDefaultOptions,\n): FetchArgs => {\n  const headers = new Headers(defaultOptions?.headers);\n  new Headers(requestInit?.headers).forEach((value, key) => {\n    headers.set(key, value);\n  });\n\n  let inputToReturn: FetchArgs[0] = input;\n  if (defaultOptions?.baseUrl) {\n    inputToReturn = new URL(input, defaultOptions.baseUrl);\n  }\n\n  return [\n    inputToReturn,\n    {\n      ...requestInit,\n      headers,\n    },\n  ];\n};\n\n// To handle Request object we need to read body as ArrayBuffer.\n// If you have a better way, please let me know.\nconst mergeRequestObjectWithRequestInit = (\n  request: Request,\n  requestInit?: RequestInit,\n): Promise<RequestInit> => {\n  const mergedRequest = new Request(request, requestInit);\n  return new Response(mergedRequest.body).arrayBuffer().then((body) => ({\n    method: mergedRequest.method,\n    headers: mergedRequest.headers,\n    body: body,\n    referrer: mergedRequest.referrer,\n    referrerPolicy: mergedRequest.referrerPolicy,\n    mode: mergedRequest.mode,\n    credentials: mergedRequest.credentials,\n    cache: mergedRequest.cache,\n    redirect: mergedRequest.redirect,\n    integrity: mergedRequest.integrity,\n    keepalive: mergedRequest.keepalive,\n    signal: mergedRequest.signal,\n    window: requestInit?.window,\n  }));\n};\n\nconst normalizeArgs = async (\n  ...args: Parameters<typeof fetch>\n): Promise<FetchArgs> => {\n  let input: string | URL;\n  let requestInit: RequestInit | undefined;\n  if (args[0] instanceof Request) {\n    input = args[0].url;\n    requestInit = await mergeRequestObjectWithRequestInit(args[0], args[1]);\n  } else {\n    input = args[0];\n    requestInit = args[1];\n  }\n\n  return [input, requestInit];\n};\n\nconst returnFetch =\n  (defaultOptions?: ReturnFetchDefaultOptions) =>\n  async (...args: Parameters<typeof fetch>): Promise<Response> => {\n    const defaultOptionAppliedArgs = applyDefaultOptions(\n      await normalizeArgs(...args),\n      defaultOptions,\n    );\n\n    // apply request interceptor\n    const fetchProvided = defaultOptions?.fetch || fetch;\n    let requestInterceptorAppliedArgs: FetchArgs;\n    if (defaultOptions?.interceptors?.request) {\n      requestInterceptorAppliedArgs =\n        await defaultOptions?.interceptors?.request?.(\n          defaultOptionAppliedArgs,\n          fetchProvided,\n        );\n    } else {\n      requestInterceptorAppliedArgs = defaultOptionAppliedArgs;\n    }\n\n    // ajax call\n    const response = await fetchProvided(...requestInterceptorAppliedArgs);\n\n    // apply response interceptor\n    return (\n      defaultOptions?.interceptors?.response?.(\n        response,\n        requestInterceptorAppliedArgs,\n        fetchProvided,\n      ) || response\n    );\n  };\n\nexport default returnFetch;\n"],"names":["normalizeArgs","_temp2","args","input","requestInit","slice","call","arguments","_temp","Request","url","Promise","resolve","request","mergedRequest","Response","body","arrayBuffer","then","method","headers","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive","signal","window","mergeRequestObjectWithRequestInit","_mergeRequestObjectWi","e","reject","defaultOptions","apply","_normalizeArgs","_temp4","fetchProvided","requestInterceptorAppliedArgs","response","_defaultOptions$inter2","interceptors","defaultOptionAppliedArgs","_ref","Headers","forEach","value","key","set","inputToReturn","baseUrl","URL","_extends","applyDefaultOptions","fetch","_temp3","_defaultOptions$inter3","_defaultOptions$inter4","_defaultOptions$inter"],"mappings":"kcAoFA,IA+CMA,EAAA,WAAa,IAEKC,IADnBC,EAECC,EACAC,EAFkBH,EAAAA,WAWtB,MAAO,CAACE,EAAOC,EAAa,EAZzBF,EAA8B,GAAAG,MAAAC,KAAAC,WAGQ,IAAAC,EACrCN,WAAAA,GAAAA,EAAK,aAAcO,QACD,OAApBN,EAAQD,EAAK,GAAGQ,IAAIC,QAAAC,QA5BkB,SACxCC,EACAT,GAEA,IAAMU,EAAgB,IAAIL,QAAQI,EAAST,GAC3C,OAAO,IAAIW,SAASD,EAAcE,MAAMC,cAAcC,KAAK,SAACF,GAAI,MAAM,CACpEG,OAAQL,EAAcK,OACtBC,QAASN,EAAcM,QACvBJ,KAAMA,EACNK,SAAUP,EAAcO,SACxBC,eAAgBR,EAAcQ,eAC9BC,KAAMT,EAAcS,KACpBC,YAAaV,EAAcU,YAC3BC,MAAOX,EAAcW,MACrBC,SAAUZ,EAAcY,SACxBC,UAAWb,EAAca,UACzBC,UAAWd,EAAcc,UACzBC,OAAQf,EAAce,OACtBC,OAAmB,MAAX1B,OAAW,EAAXA,EAAa0B,OACtB,EACH,CASwBC,CAAkC7B,EAAK,GAAIA,EAAK,KAAGgB,KAAAc,SAAAA,GAAvE5B,EAAW4B,CAA6D,GAExE7B,EAAQD,EAAK,GACbE,EAAcF,EAAK,EAAG,CALpBA,GAKoB,OAAAS,QAAAC,QAAAJ,GAAAA,EAAAU,KAAAV,EAAAU,KAAAjB,GAAAA,IAI1B,CAAC,MAAAgC,GAAA,OAAAtB,QAAAuB,OAAAD,EAED,CAAA,SACE,SAACE,GAA0C,OAAA,WAAA,IACoBxB,OAAAA,QAAAC,QAErDZ,EAAaoC,WAAA,EAAA,GAAA/B,MAAAC,KAFwCC,aAE/BW,KAAA,SAAAmB,GAAAC,SAAAA,IAAA3B,OAAAA,QAAAC,QAkBP2B,EAAaH,WAAA,EAAII,IAA8BtB,KAAhEuB,SAAAA,OAAQC,EAGd,OACgB,MAAdP,GAA4B,OAAdO,EAAdP,EAAgBQ,eAAsB,MAAtCD,EAA8BD,cAAQ,EAAtCC,EAA8BD,SAC5BA,EACAD,EACAD,KACGE,CACL,EA5BF,CAAA,IAOID,EAPEI,EAlEkB,SAAHC,EAEvBV,GACa,IAFZhC,EAAK0C,EAAA,GAAEzC,EAAWyC,EAAA,GAGbzB,EAAU,IAAI0B,cAAQX,SAAAA,EAAgBf,SAC5C,IAAI0B,QAAQ1C,MAAAA,OAAAA,EAAAA,EAAagB,SAAS2B,QAAQ,SAACC,EAAOC,GAChD7B,EAAQ8B,IAAID,EAAKD,EACnB,GAEA,IAAIG,EAA8BhD,EAKlC,OAJIgC,MAAAA,GAAAA,EAAgBiB,UAClBD,EAAgB,IAAIE,IAAIlD,EAAOgC,EAAeiB,UAGzC,CACLD,EAAaG,EAERlD,GAAAA,GACHgB,QAAAA,IAGN,CA6CqCmC,CAAmBlB,EAElDF,GAIII,GAA8B,MAAdJ,OAAc,EAAdA,EAAgBqB,QAASA,MACFC,EAAA,SAAAC,GACJ,IAAAC,EAArCxB,GAAcuB,MAAdvB,UAAcuB,EAAdvB,EAAgBQ,eAAhBe,EAA8B7C,QAAO,OAAAF,QAAAC,QAEjB,MAAduB,GAAAwB,OAAcA,EAAdxB,EAAgBQ,eAAhBgB,MAAAA,EAA8B9C,aAA9B8C,EAAAA,EAA8B9C,QAClC+B,EACAL,IACDrB,KAAA0C,SAAAA,GAJHpB,EAA6BoB,CAIzB,GAEJpB,EAAgCI,CAAyB,CARd,GAQc,OAAAa,GAAAA,EAAAvC,KAAAuC,EAAAvC,KAAAoB,GAAAA,GAAA,EAc7D,CAAC,MAAAL,GAAAtB,OAAAA,QAAAuB,OAAAD,EAEH,CAAA,CAAA"}